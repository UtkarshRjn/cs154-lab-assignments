File Name: observation.txt (CS 152/154 Laboratory, 2021 Batch)
Observation for: lab13
Author: Utkarsh Ranjan (200050147) 

DESCRIPTION : Exlanation of codes and debugging.

# graph.pl

* This function was initally giving infinite recursion. So I added ! mark operator at the end
to avoid further execution and terminate the call.
* The cut, in Prolog, is a goal, written as !, which always succeeds, but cannot be backtracked.
It is best used to prevent unwanted backtracking, including the finding of extra solutions by Prolog and 
to avoid unnecessary computations.
* Here query connected(X,Y). was checking each fact and rules from the top. As it was reaching the predicate
connected(A,B). it was further executing connected(B,A). which after returning B = delhi, A = mumbai was backtracking
to obtain A and B from other facts.
* This backtracking was causing the execution to reach connected(A,B) again (B = A, A = B), which further continued 
indefinitely.
* This infinite execution was terminated using cut operator.

Output:
# Without cut operator
| ?- connected(X,Y).
      1    1  Call: connected(_23,_24) ? 
      1    1  Exit: connected(delhi,mumbai) ? 

X = delhi
Y = mumbai ? ;
      1    1  Redo: connected(delhi,mumbai) ? 
      1    1  Exit: connected(mumbai,bangalore) ? 

X = mumbai
Y = bangalore ? ;
      1    1  Redo: connected(mumbai,bangalore) ? 
      1    1  Exit: connected(bangalore,chennai) ? 

X = bangalore
Y = chennai ? ;
      1    1  Redo: connected(bangalore,chennai) ? 
      1    1  Exit: connected(chennai,kolkata) ? 

X = chennai
Y = kolkata ? ;
      1    1  Redo: connected(chennai,kolkata) ? 
      1    1  Exit: connected(kolkata,patna) ? 

X = kolkata
Y = patna ? ;
      1    1  Redo: connected(kolkata,patna) ? 
      2    2  Call: connected(_24,_23) ? 
      2    2  Exit: connected(delhi,mumbai) ? 
      1    1  Exit: connected(mumbai,delhi) ? 

X = mumbai
Y = delhi ? ;
      1    1  Redo: connected(mumbai,delhi) ? 
      2    2  Redo: connected(delhi,mumbai) ? 
      2    2  Exit: connected(mumbai,bangalore) ? 
      1    1  Exit: connected(bangalore,mumbai) ? 

X = bangalore
Y = mumbai ? ;
      1    1  Redo: connected(bangalore,mumbai) ? 
      2    2  Redo: connected(mumbai,bangalore) ? 
      2    2  Exit: connected(bangalore,chennai) ? 
      1    1  Exit: connected(chennai,bangalore) ? 

X = chennai
Y = bangalore ? ;
      1    1  Redo: connected(chennai,bangalore) ? 
      2    2  Redo: connected(bangalore,chennai) ? 
      2    2  Exit: connected(chennai,kolkata) ? 
      1    1  Exit: connected(kolkata,chennai) ? 

X = kolkata
Y = chennai ? ;
      1    1  Redo: connected(kolkata,chennai) ? 
      2    2  Redo: connected(chennai,kolkata) ? 
      2    2  Exit: connected(kolkata,patna) ? 
      1    1  Exit: connected(patna,kolkata) ? 

X = patna
Y = kolkata ? ;
      1    1  Redo: connected(patna,kolkata) ? 
      2    2  Redo: connected(kolkata,patna) ? 
      3    3  Call: connected(_23,_24) ? 
      3    3  Exit: connected(delhi,mumbai) ? 
      2    2  Exit: connected(mumbai,delhi) ? 
      1    1  Exit: connected(delhi,mumbai) ? 

X = delhi
Y = mumbai ? ;
      1    1  Redo: connected(delhi,mumbai) ? 
      2    2  Redo: connected(mumbai,delhi) ? 
      3    3  Redo: connected(delhi,mumbai) ? 
      3    3  Exit: connected(mumbai,bangalore) ? 
      2    2  Exit: connected(bangalore,mumbai) ? 
      1    1  Exit: connected(mumbai,bangalore) ? 

X = mumbai
Y = bangalore ? ;
      1    1  Redo: connected(mumbai,bangalore) ? 
      2    2  Redo: connected(bangalore,mumbai) ? 
      3    3  Redo: connected(mumbai,bangalore) ? 
      3    3  Exit: connected(bangalore,chennai) ? 
      2    2  Exit: connected(chennai,bangalore) ? 
      1    1  Exit: connected(bangalore,chennai) ? 

X = bangalore
Y = chennai ? 

Output: 
# With cut operator

| ?- connected(X,Y).
      1    1  Call: connected(_23,_24) ? 
      1    1  Exit: connected(delhi,mumbai) ? 

X = delhi
Y = mumbai ? ;
      1    1  Redo: connected(delhi,mumbai) ? 
      1    1  Exit: connected(mumbai,bangalore) ? 

X = mumbai
Y = bangalore ? ;
      1    1  Redo: connected(mumbai,bangalore) ? 
      1    1  Exit: connected(bangalore,chennai) ? 

X = bangalore
Y = chennai ? ;
      1    1  Redo: connected(bangalore,chennai) ? 
      1    1  Exit: connected(chennai,kolkata) ? 

X = chennai
Y = kolkata ? ;
      1    1  Redo: connected(chennai,kolkata) ? 
      1    1  Exit: connected(kolkata,patna) ? 

X = kolkata
Y = patna ? ;
      1    1  Redo: connected(kolkata,patna) ? 
      2    2  Call: connected(_24,_23) ? 
      2    2  Exit: connected(delhi,mumbai) ? 
      1    1  Exit: connected(mumbai,delhi) ? 

X = mumbai
Y = delhi

(4 ms) yes

# reverse.pl

* Sir's reverse was wrong I have rewritten a fresh code.(myreverse.pl)
* I have made a function rev which call findrev function with three agrument of which one is an empty list.
* The list then get appended by taking the first element out from input list and then adding it at the beginning of the new list being formed.

Input:
rev([1,2,3],L).

Output:
| ?- rev([1,2,3],L).    
      1    1  Call: rev([1,2,3],_29) ? 
      2    2  Call: findrev([1,2,3],[],_29) ? 
      3    3  Call: findrev([2,3],[1],_29) ? 
      4    4  Call: findrev([3],[2,1],_29) ? 
      5    5  Call: findrev([],[3,2,1],_29) ? 
      5    5  Exit: findrev([],[3,2,1],[3,2,1]) ? 
      4    4  Exit: findrev([3],[2,1],[3,2,1]) ? 
      3    3  Exit: findrev([2,3],[1],[3,2,1]) ? 
      2    2  Exit: findrev([1,2,3],[],[3,2,1]) ? 
      1    1  Exit: rev([1,2,3],[3,2,1]) ? 

L = [3,2,1]

# pathconnected.pl

* This code was already correct so I didn't do any changes.

Input: path(A,B). 
Output: 

A = delhi
B = mumbai ? ;

A = mumbai
B = bangalore ? ;

A = bangalore
B = chennai ? ;

A = chennai
B = kolkata ? ;

A = kolkata
B = patna ? ;

A = delhi
B = bangalore ? ;

A = delhi
B = chennai ? ;

A = delhi
B = kolkata ? ;

A = delhi
B = patna ? ;

A = mumbai
B = chennai ? ;

A = mumbai
B = kolkata ? ;

A = mumbai
B = patna ? ;

A = bangalore
B = kolkata ? ;

A = bangalore
B = patna ? ;

A = chennai
B = patna ? ;

(3 ms) no

# parent.pl

* In this code when X \= Y was not there, it was giving cases like X = harry, Y = harry.
* But with X=\=Y in the predicate sibling(X,Y) was added those cases get discarded.

Input: 
sibling(X,Y).

Output:
1    1  Call: sibling(_23,_24) ? 
      2    2  Call: parent(_23,_102) ? 
      2    2  Exit: parent(harry,tom) ? 
      3    2  Call: parent(_24,tom) ? 
      3    2  Exit: parent(harry,tom) ? 
      4    2  Call: harry\=harry ? 
      5    3  Call: harry=harry ? 
      5    3  Exit: harry=harry ? 
      4    2  Fail: harry\=harry ? 
      3    2  Redo: parent(harry,tom) ? 
      3    2  Exit: parent(sally,tom) ? 
      4    2  Call: harry\=sally ? 
      5    3  Call: harry=sally ? 
      5    3  Fail: harry=sally ? 
      4    2  Exit: harry\=sally ? 
      1    1  Exit: sibling(harry,sally) ? 

X = harry
Y = sally ? ;
      1    1  Redo: sibling(harry,sally) ? 
      3    2  Redo: parent(sally,tom) ? 
      3    2  Fail: parent(_24,tom) ? 
      2    2  Redo: parent(harry,tom) ? 
      2    2  Exit: parent(sally,tom) ? 
      3    2  Call: parent(_24,tom) ? 
      3    2  Exit: parent(harry,tom) ? 
      4    2  Call: sally\=harry ? 
      5    3  Call: sally=harry ? 
      5    3  Fail: sally=harry ? 
      4    2  Exit: sally\=harry ? 
      1    1  Exit: sibling(sally,harry) ? 

X = sally
Y = harry ? ;
      1    1  Redo: sibling(sally,harry) ? 
      3    2  Redo: parent(harry,tom) ? 
      3    2  Exit: parent(sally,tom) ? 
      4    2  Call: sally\=sally ? 
      5    3  Call: sally=sally ? 
      5    3  Exit: sally=sally ? 
      4    2  Fail: sally\=sally ? 
      3    2  Redo: parent(sally,tom) ? 
      3    2  Fail: parent(_24,tom) ? 
      2    2  Redo: parent(sally,tom) ? 
      2    2  Exit: parent(harry,june) ? 
      3    2  Call: parent(_24,june) ? 
      3    2  Exit: parent(harry,june) ? 
      4    2  Call: harry\=harry ? 
      5    3  Call: harry=harry ? 
      5    3  Exit: harry=harry ? 
      4    2  Fail: harry\=harry ? 
      3    2  Redo: parent(harry,june) ? 
      3    2  Exit: parent(sally,june) ? 
      4    2  Call: harry\=sally ? 
      5    3  Call: harry=sally ? 
      5    3  Fail: harry=sally ? 
      4    2  Exit: harry\=sally ? 
      1    1  Exit: sibling(harry,sally) ? 

X = harry
Y = sally ? 

(10 ms) yes